
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zjohfhpkgubjeraxeuqc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpqb2hmaHBrZ3ViamVyYXhldXFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyODYxMzgsImV4cCI6MjA1Nzg2MjEzOH0.YEzMXD_0Ta1qo5BIiuSRjcRWItAcCZZgFS5-1zv0p8s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  },
  global: {
    headers: {
      'x-client-info': 'roomreservation@1.0.0'
    },
    fetch: fetch.bind(globalThis)
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  db: {
    schema: 'public'
  },
  // Add retryable configurations to avoid temporary network issues
  maxRetryCount: 3,
  retryInterval: 2000 // 2 seconds between retries
});

// Helper functions to safely handle Supabase type issues
export function isError(data: any): boolean {
  return typeof data === 'object' && data !== null && 'error' in data;
}

// Enhanced type-safe helpers for Supabase data
export function extractData<T>(result: { data: T | null, error: Error | null }): T | null {
  if (result.error) {
    console.error("Supabase error:", result.error);
    return null;
  }
  return result.data;
}

// Safe helper for checking if data is valid before using it
export function isValidData<T>(data: any): data is T {
  return data !== null && typeof data === 'object' && !isError(data);
}
