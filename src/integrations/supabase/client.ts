
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zjohfhpkgubjeraxeuqc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpqb2hmaHBrZ3ViamVyYXhldXFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyODYxMzgsImV4cCI6MjA1Nzg2MjEzOH0.YEzMXD_0Ta1qo5BIiuSRjcRWItAcCZZgFS5-1zv0p8s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  },
  global: {
    fetch: fetch.bind(globalThis)
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  db: {
    schema: 'public'
  }
});

/**
 * Helper function to check if a response from Supabase is an error
 */
export function isSupabaseError(data: any): boolean {
  return data && typeof data === 'object' && 'error' in data;
}

/**
 * Helper function to safely access properties from Supabase responses
 * and handle potential errors
 */
export function safeDataAccess<T>(data: any, defaultValue: T): T {
  if (isSupabaseError(data) || !data) {
    return defaultValue;
  }
  return data as T;
}

/**
 * Helper function to safely type cast Supabase query parameters
 */
export function asSupabaseParam<T>(value: any): T {
  return value as unknown as T;
}
